<launch>
     <arg name="is_model_floating_base" default="false"/>
     <arg name="use_goal_generator" default="false"/>
     
     <!-- send the teleop robot XML to param server -->
     <param name="robot_description" command="$(find xacro)/xacro.py '$(find teleop_urdf)/urdf/teleop_fixed_base.urdf'" />
     <param name="robot_description_semantic" textfile="$(find teleop_srdf)/srdf/teleop_fixed_base.srdf" />   

     <!-- send problem description to param server: this is used by goal sampler -->
    <param name="planner/problem_description_goal"
        textfile="$(find multi_contact_planning)/configs/problem/teleop_goal_generation_stack.yaml"/>

    <!-- problem description for manifold -->
    <param name="planner/problem_description_constraint"
        textfile="$(find multi_contact_planning)/configs/problem/teleop_constraint_stack.yaml"/>

    <!-- start planner -->  
    <node pkg="multi_contact_planning" type="planning_server" name="planning_server" output="screen">
        <remap from="planner/goal/joint_states" to="cartesian/solution"/>
        <param name="solver" value=""/>
        <param name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
        <param name="use_goal_generator" value="$(arg use_goal_generator)"/>
        <param name="planner_config"
            textfile="$(find multi_contact_planning)/configs/problem/teleop_config.yaml"/>
        <rosparam param="base_links">['teleop_link0']</rosparam>
        <rosparam param="distal_links">['TCP']</rosparam>
    </node>

    <!-- Previewer of trajectory -->
    <node pkg="multi_contact_planning" type="previewer" name="planner_previewer" output="screen">
    	<param name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
    </node>
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_world"
        args="0 0 0 0 0 0 world planner/world 30"/>

    <!-- This is needed to connect robot_start marker with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_start"
        args="0 0 0 0 0 0 world planner/start/world 30"/>

    <!-- This is needed to connect robot_goal marker with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal"
        args="0 0 0 0 0 0 world planner/goal/world 30"/>

    <!-- Goal sampler to generate goal state -->
    <node if="$(arg use_goal_generator)" pkg="cartesian_interface" type="marker_spawner" name="goal_marker_spawner" output="screen">
        <param name="ns" value="planner/goal_sampler"/>
        <param name="tf_prefix" value="planner/goal_sampler"/>
    </node>

        <!-- This is needed to connect robot_goal marker with "world" frame -->
    <node pkg="tf" type="static_transform_publisher" name="world_connecter_planner_goal_sampler"
        args="0 0 0 0 0 0 world planner/goal_sampler/world 30"/>

    <!-- CARTESI/O to generate goal state -->
    <!-- send problem description to param server: this is used by CartesI/O for IK -->
    <param name="cartesian/problem_description"
        textfile="$(find multi_contact_planning)/configs/problem/teleop_cartesio_stack.yaml"/>
    <include unless="$(arg use_goal_generator)" file="$(find cartesian_interface)/launch/cartesio.launch">
        <arg name="tf_prefix" value="ci"/>
        <arg name="is_model_floating_base" value="$(arg is_model_floating_base)"/>
    </include>
    
    <!-- This is needed to connect cartesio marker with "world" frame -->
    <node unless="$(arg use_goal_generator)" pkg="tf" type="static_transform_publisher" name="world_connecter_planner_ci"
        args="0 0 0 0 0 0 world ci/world 30"/>


    <!-- Planning scene -->
    <node pkg="multi_contact_planning" type="planning_scene_publisher" name="planning_scene_publisher" output="screen"/>

    <!-- Obstacle with interactive marker -->     
      <node name="mesh_viz_floor" pkg="mesh_viz" type="mesh_viz_node" output="screen">
        <param name="mesh_path" value="$(find multi_contact_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value="2."/>
        <param name="scale_y" type="double" value="1.5"/>
        <param name="scale_z" type="double" value=".1"/>
        <param name="frame_id" value="world"/>
        <param name="name_id" value="floor"/>
        <param name="show_control_axis" type="bool" value="true"/>
        <remap from="mesh_viz_floor/floor" to="planner/collision_objects"/>
  </node>

    <!-- ??? -->
      <node name="mesh_viz_object" pkg="mesh_viz" type="attached_obj_node" output="screen">
        <param name="mesh_path" value="$(find multi_contact_planning)/utils/simple_box.stl" />
        <param name="scale_x" type="double" value=".1"/>
        <param name="scale_y" type="double" value=".1"/>
        <param name="scale_z" type="double" value=".1"/>
        <param name="frame_id" value="TCP"/>
        <param name="name_id" value="object"/>
        <rosparam param="touch_links">["tool_exchanger"]</rosparam>
        <rosparam param="position">[0., 0., 0.1]</rosparam>
        <remap from="mesh_viz_object/object" to="planner/attached_collision_objects"/>
  </node>



 <node type="rviz" name="rviz" pkg="rviz"
        args="-d $(find multi_contact_planning)/configs/rviz/example_teleop.rviz" output="screen"/>
    
</launch>
